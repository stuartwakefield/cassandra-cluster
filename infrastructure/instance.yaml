Parameters:

  # Needs to pull in IP and volume, without IP the other nodes
  # will be unaware that noone can reach the node. Without the
  # volume we could end up in a bad state.

  NetworkStack:
    Type: String
    Description: The network stack from which to use resources.

  SubnetName:
    Type: String
    Description: The name of the subnet to which to attach.

  Name:
    Type: String
    Description: The name of the instance.

  IPAllocationName:
    Type: String
    Description: The name of the IP allocation to attach.

  VolumeName:
    Type: String
    Description: The name of the volume to attach.

  PrivateIPName:
    Type: String
    Description: The name of the private IP address to assign the instance.

Resources:

  Instance:
    Type: AWS::EC2::Instance
    Properties:
      EbsOptimized: true
      ImageId: ami-cd9fd4be
      InstanceType: i2.xlarge
      KeyName: cassandra
      PrivateIpAddress:
        Fn::ImportValue: !Sub ${NetworkStack}:${PrivateIPName}
      Monitoring: true
      SubnetId:
        Fn::ImportValue: !Sub ${NetworkStack}:${SubnetName}
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${NetworkStack}:CassandraSecurityGroup
      Volumes:
        - Device: /dev/sdk
          VolumeId:
            Fn::ImportValue: !Sub ${NetworkStack}:${VolumeName}
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash -x

              # Installation
              JDK_RPM_URL="http://download.oracle.com/otn-pub/java/jdk/8u112-b15/jdk-8u112-linux-x64.rpm"
              ACCEPT_ORACLE_LICENSE="oraclelicense=accept-securebackup-cookie"
              curl -LOH "Cookie: $ACCEPT_ORACLE_LICENSE" "$JDK_RPM_URL"
              cat<<EOF >/etc/yum.repos.d/datastax.repo
              [datastax]
              name = DataStax Repo for Apache Cassandra
              baseurl = http://rpm.datastax.com/community
              enabled = 1
              gpgcheck = 0
              EOF
              yum -y install jdk-8u112-linux-x64.rpm dsc30

              # Configuration
              seed_ips="${SeedIPs}"
              cp /etc/cassandra/conf/cassandra.yaml cassandra.yaml.bak
              cat cassandra.yaml.bak | \
                sed 's/^.*\(cluster_name:\).*$/\1 main/' | \
                sed 's/^.*\(listen_address:.*\)$/# \1/' | \
                sed 's/^.*\(listen_interface:\).*$/\1 eth0/' | \
                sed 's/^.*\(listen_interface_prefer_ipv6:\).*$/\1 false/' | \
                sed 's/^.*\(start_rpc:\).*$/\1 true/' | \
                sed 's/^.*\(rpc_address:.*\)$/# \1/' | \
                sed 's/^.*\(rpc_interface:\).*$/\1 eth0/' | \
                sed 's/^.*\(rpc_interface_prefer_ipv6:\).*/\1 false/' | \
                sed "s/^\(\s*- seeds:\).*$/\1 $seed_ips/" | \
                sed 's/^.*\(authenticator:\).*$/\1 PasswordAuthenticator/' | \
                sed 's/^.*\(authorizer:\).*$/\1 CassandraAuthorizer/' | \
                sed 's/^.*\(endpoint_snitch:\).*$/\1 Ec2Snitch/' >/etc/cassandra/conf/cassandra.yaml
              echo 'auto_bootstrap: false' >>/etc/cassandra/conf/cassandra.yaml

              # Check if the volume is formatted, and if not, format it.
              (sudo file -s /dev/xvdk | grep --silent UUID) || sudo mkfs -t ext4 /dev/xvdk

              # Mount the volume to the instance
              mkdir -p /var/lib/cassandra
              echo "/dev/xvdk /var/lib/cassandra ext4 defaults 0 2" >>/etc/fstab
              mount -a
              chown -R cassandra:cassandra /var/lib/cassandra

              # Boot config
              chkconfig cassandra on

              # Startup
              service cassandra start
            - SeedIPs:
                Fn::ImportValue: !Sub ${NetworkStack}:SeedIPs
      Tags:
        - Key: Name
          Value: !Ref Name

  InstanceIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref Instance
      AllocationId:
        Fn::ImportValue: !Sub ${NetworkStack}:${IPAllocationName}

Outputs:

  Instance:
    Value: !Ref Instance
    Export:
      Name: !Sub ${AWS::StackName}:Instance
